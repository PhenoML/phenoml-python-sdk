# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawAuthtokenClient, RawAuthtokenClient
from .types.authtoken_generate_token_response import AuthtokenGenerateTokenResponse


class AuthtokenClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawAuthtokenClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawAuthtokenClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawAuthtokenClient
        """
        return self._raw_client

    def generate_token(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AuthtokenGenerateTokenResponse:
        """
        Generates a JWT token using Basic Authentication with username or email and password.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AuthtokenGenerateTokenResponse
            Successfully generated token

        Examples
        --------
        from phenoml import phenoml

        client = phenoml(
            token="YOUR_TOKEN",
        )
        client.authtoken.generate_token()
        """
        _response = self._raw_client.generate_token(request_options=request_options)
        return _response.data


class AsyncAuthtokenClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawAuthtokenClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawAuthtokenClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawAuthtokenClient
        """
        return self._raw_client

    async def generate_token(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AuthtokenGenerateTokenResponse:
        """
        Generates a JWT token using Basic Authentication with username or email and password.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AuthtokenGenerateTokenResponse
            Successfully generated token

        Examples
        --------
        import asyncio

        from phenoml import Asyncphenoml

        client = Asyncphenoml(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.authtoken.generate_token()


        asyncio.run(main())
        """
        _response = await self._raw_client.generate_token(request_options=request_options)
        return _response.data
